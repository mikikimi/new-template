// Mixin
@import "css3-mixins.less";
@import "libs/bootstrap/mixins.less";

// Usage
// Convert to em
// .px2em(~"margin", 20px 30px 20px)
// .px2em(~"font-size", 20px)
// .px2em(~"font-size", 20px, 18px)
// Convert to rem
// .px2rem(~"margin", 20px 30px 20px)
// .px2rem(~"font-size", 20px)
// .px2rem(~"font-size", 20px, 18px)
.px2units(@property, @unit, @target: @font-size-base, @default: @font-size-base) {
  @n: length(@target);
  .put(@i) when (extract(@target, @i) = auto), (extract(@target, @i) = 0) {
    @item: extract(@target, @i);
    .put((@i + 1), ~"@{item}");
  }
  .put(@i) when (default()) {
    @item: unit(round(extract(@target, @i) / @default, 3), @unit);
    .put((@i + 1), ~"@{item}");
  }
  .put(@i, @item) when (extract(@target, @i) = auto), (extract(@target, @i) = 0) and (@i <= @n) {
    @nextItem: extract(@target, @i);
    .put((@i + 1), ~"@{item} @{nextItem}");
  }
  .put(@i, @item) when (default()) and (@i <= @n) {
    @nextItem: unit(round(extract(@target, @i) / @default, 3), @unit);
    .put((@i + 1), ~"@{item} @{nextItem}");
  }
  .put(@i, @item) when (@i > @n) {
    @{property}: @item;
  }
  .put(1);
}
.px2em(@property, @target: @font-size-base, @default: @font-size-base) {
  .px2units(@property, em, @target, @default);
}
.px2rem(@property, @target: @font-size-base, @default: @font-size-base) {
  .px2units(@property, rem, @target, @default);
}

// Sizing shortcuts
.size(@width, @height: @width) {
  width: @width;
  height: @height;
}

// Font face
// Usage
// 1. Create new variables for fonts name. ex: @var1:...; @var2:...;
// 2. Call by .font-faces(@var1 @var2)
.font-faces(@names) {
  .loop(@i) when (@i <= length(@names)) {
    @name: extract(@names, @i);
    @font-face {
      font-family: @name;
      src: url('../fonts/@{name}.woff2') format('woff2'),
        url('../fonts/@{name}.woff') format('woff'),
        url('../fonts/@{name}.ttf')  format('truetype');
      font-weight: normal;
      font-style: normal;
    }
    .loop(@i + 1);
  }
  .loop(1);
}
